from solcx import compile_standard,install_solc
install_solc("0.8.0")
import time
import sys
import json #to save the output in a JSON file
with open("Verification.sol", "r") as file:
    contact_list_file = file.read()
    #print(contact_list_file)


#print("1")
compiled_sol = compile_standard(
    {
        "language": "Solidity",
        "sources": {"Verification.sol": {"content": contact_list_file}},
        "settings": {
            "outputSelection": {
                "*": {
                     "*": ["abi", "metadata", "evm.bytecode", "evm.bytecode.sourceMap"] # output needed to interact with and deploy contract 
                }
            }
        },
    },
    solc_version="0.8.0",
)
#print("2")
#print(compiled_sol)
with open("Verification.json", "w") as file:
    json.dump(compiled_sol, file)    
#print("3")
# get bytecode
bytecode = compiled_sol["contracts"]["Verification.sol"]["Verification"]["evm"]["bytecode"]["object"]
# get abi
abi = json.loads(compiled_sol["contracts"]["Verification.sol"]["Verification"]["metadata"])["output"]["abi"]


from web3 import Web3 
#print("4")
w3 = Web3(Web3.HTTPProvider('http://127.0.0.1:8545'))
chain_id = 1337
address = "0xa9981f59273F54530F5FE463ead33edA88c51436" #quickstart need to change by ozr
private_key = "657ed5b879015b94e4b9a6b22c89d63c2bd0b8a2aaa1c2ab302d733bba79aa8f" # leaving the private key like this is very insecure if you are working on real world project


# Create the contract in Python
ContactList = w3.eth.contract(abi=abi, bytecode=bytecode)
# Get the number of latest transaction
nonce = w3.eth.getTransactionCount(address)

transaction = ContactList.constructor().buildTransaction(
    {"chainId": chain_id, "gasPrice": w3.eth.gas_price, "from": address, "nonce": nonce}
)
sign_transaction = w3.eth.account.sign_transaction(transaction, private_key=private_key)
print("Deploying Contract!")
# Send the transaction
transaction_hash = w3.eth.send_raw_transaction(sign_transaction.rawTransaction)
# Wait for the transaction to be mined, and get the transaction receipt
print("Waiting for transaction to finish...")
transaction_receipt = w3.eth.wait_for_transaction_receipt(transaction_hash)
print(f"Done! Contract deployed to {transaction_receipt.contractAddress}")


ctt = w3.eth.contract(address=transaction_receipt.contractAddress, abi=abi)

g= [(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2)]
y1= [(10415861484417082502655338383609494480414113902179649885744799961447382638712, 10196215078179488638353184030336251401353352596818396260819493263908881608606), (19603121658858655875247255127227546065511167701958109023745805570144594432590, 18396643206309242224060210403331962159520263222429416365150105776739848612253),  (12675660768721422075267449245003299685786160899415177000125896990776422975094, 10181720397295043609493739615354057490307660066178805290022903951641512260325),  (3572007013346143209638763387554688254919050389299767041212159200714539490048, 11598575859373144661383311544753242686022544768196299002900578473770365000058),  (18915118886239077384850787209919318083217506747797448313598396744544779963252, 11350684411396297064017972465206356411549399200217246763599703829180886871315),  (21660510033924145428037068481314119149817954870269589098820734298561501487827, 5026846402891291625968839259521363177869823464468406812047115376675348235370)]
h=[(13882920197094825937993373209196571673243740045780299889564177861042199448668, 815835003066117302896885879504788741369184493778590380359406037463615253143), (2785442801771728695147680055328210171754900178545350324423559554666738183945, 8421823852613937522630799562500618912415170823854734089642915497687941612153), (3488720486867948215665257390117551656630444133551353145677752396396302329339, 14063041712709909725084260700198731567306619458522530146950756682403053643663), (4014507931232557256306118096197498050047353256320665565897038937911463783299, 7566803418050097379216188944325640376971391678677161698914219075396874651450), (160734218844323134653076048470731220422427300818637260228549328147268105041, 1789591586337446364350601001937447029161218086634735170942761873444653595273), (18811488414245871168988423988348384542189212251797396994640632673173457580065, 11113279591033396790643970854041510039983989070309413939958825439541117016209)]
y2= [(17898506853122034219380445692942698525931909337700160540057262341927077117049, 8241864080428868014232799930080174266376537554833829327572392522913183429171),  (18589646216709228880372976132591417787230455822929979688558680667789561799994, 16270211106189275701398295741159561792369005986936797579031544616771287453377),  (18114048948393911233701830303939238550591210066373239509183401261299706023372, 13131085568664177781638239704416583564008021347405430889966219354847528969864),  (10464372859021721729092943140471357473994848450172899862122775930388046802834, 14341679523337598262386733879455436686611673628962438882914306959771079309766),  (1042411892961410149587361495968120221115737045934067463714630610833887822982, 12776390455661570490623293599637464458623636007525923689993344064751682912961),  (4474061030829073670691496489372141326353677527087840364885759807381838997472, 11989384876715165879963591453737759401196293351542747163032484494701252097319)]
c=90771067515832826971114580018810270650612112454719758049979429704182950638112
a1= [(10840316413743395706760834131243583374888347777145299702737869501469932595399, 5285443102254207126418074302529195629724604822003725689737876568731786014310), (10840316413743395706760834131243583374888347777145299702737869501469932595399, 5285443102254207126418074302529195629724604822003725689737876568731786014310), (10840316413743395706760834131243583374888347777145299702737869501469932595399, 5285443102254207126418074302529195629724604822003725689737876568731786014310), (10840316413743395706760834131243583374888347777145299702737869501469932595399, 5285443102254207126418074302529195629724604822003725689737876568731786014310), (10840316413743395706760834131243583374888347777145299702737869501469932595399, 5285443102254207126418074302529195629724604822003725689737876568731786014310), (10840316413743395706760834131243583374888347777145299702737869501469932595399, 5285443102254207126418074302529195629724604822003725689737876568731786014310)]
a2= [(1867006481691307318522707831685799996650064082185139302363387724707858743217, 11871973928294668920032512513729283019072778579167991565006325287278510880740), (19497603391062499151825778538115396481354760899569809805583477374860634182356, 5307205401125751928432557199669335497983405674794735678810304755634366545170), (17378483208398758261096464349924845062188007087683861633982772706758916177124, 16153320497712175651576303891771818925710876326390000833597028982603292395546), (14204345797902160698688548683669260196343649095893758417061885322303765112648, 15597869663581255889808898989429102033467010724154245739424278746485463203615), (12024898039695673408565791173271671019062337480661529175561194894141190503089, 13288825433587905615794237086741881574879765063623179651929039216814454069454), (12030953170427128090356527691881663492929288667542536995990555079837940235542, 21125116863394433596258696629581658650736193868041407319896724756072232188355)]
z=[809722163274651336548000430501198365920338502597579385229928070870863270580, 20144247725150697148169232098914805508939824619120372198495786183117839390633, 20196146507194075785864210982367976237954938615498509722788146913055191763011, 8704418612359543438050927636571470483074986337978922835842589578575446072973, 15296307015441131515393778362493323262957638033224576759092897684146936501395, 3934326075715045761817942225329744330615470746650333682878242174510571742302]

gas_estimate = ctt.functions.DELQVerify(g,y1,h,y2,c,a1,a2,z,6).estimateGas()
print("The gas is  ",gas_estimate)
arr=ctt.functions.DELQVerify(g,y1,h,y2,c,a1,a2,z,6).call({"from":w3.eth.accounts[0], 'gas': 500_000_000_000})
print("arr=",arr)



"""
import pysolcrypto.schnorr

s = 19977808579986318922850133509558564821349392755821541651519240729619349670944
m = 19996069338995852671689530047675557654938145690856663988250996769054266469975

   
proof = list(pysolcrypto.schnorr.schnorr_create(s, m))
for i in range(0, len(proof[0])):
   proof[0][i]=proof[0][i].n
# assert(proof1[0]==proof[0])

gas_estimate = ctt.functions.VerifySchnorrProof(proof[0],m,proof[1],proof[2]).estimateGas()
print("Sending transaction to VerifySchnorrProof ",gas_estimate)
ret = ctt.functions.VerifySchnorrProof(proof[0],m,proof[1],proof[2]).call({"from":w3.eth.accounts[0], 'gas': 500_000_000})
print("Schnorr verify:",ret)
ctt.functions.VerifySchnorrProof(proof[0],m,proof[1],proof[2]).transact({"from":w3.eth.accounts[5]})
print("11")
ctt.functions.VerifySchnorrProof(proof[0],m,proof[1],proof[2]).build_transaction({"from":w3.eth.accounts[4]})


import pysolcrypto.aosring as ring
msg = ring.randsn()
keys = ring.aosring_randkeys(4)
sigs=ring.aosring_sign(*keys, message=msg)
pks=[]
for i in range(0,len(sigs[0])):
   pks.append(sigs[0][i][0].n)
   pks.append(sigs[0][i][1].n)
assert ring.aosring_check(*sigs, message=msg)
gas_estimate = ctt.functions.VerifyRingSig(pks,sigs[1],sigs[2],msg).estimateGas()
print("Sending transaction to VerifyRingSig(pks,sigs[2],sigs[3],msg)",gas_estimate)
ret = ctt.functions.VerifyRingSig(pks,sigs[1],sigs[2],msg).call({"from":w3.eth.accounts[0], 'gas': 500_000_000})
print("ring Signature verify:",ret)
"""




# exit()
